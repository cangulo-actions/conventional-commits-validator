name: 'üöÄ semver create release'
description: 'Get the commits from the last commit'
inputs:
  configuration:
    description: 'flag for creating GH release'
    required: true
    default: ''
  add-labels-to-pr:
    description: 'flag adding labels to the PR. Available labels: {release-type:[major, minor, patch, no-release]}'
    required: true
    default: 'true'
  print-summary:
    description: 'flag for printing the release details to the GITHUB_STEP_SUMMARY'
    required: true
    default: 'true'

outputs:
  new-release-triggered:
    value: ${{ steps.validate-commits.outputs.next-release-triggered }}
    description: 'flag to detect if the PR changes will trigger a new release'
  next-version:
    value: ${{ steps.validate-commits.outputs.next-version }}
    description: 'version to be released when the PR is merged'
  next-release-type:
    value: ${{ steps.validate-commits.outputs.next-release-type }}
    description: 'next release type: major, minor or patch'
  changes:
    value: ${{ steps.validate-commits.outputs.changes }}
    description: 'commits parsed into model: [{type, releaseAssociated, scopes, description, originalCommit}]'
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: '{scopename:{version,changes,changelog-record}}'

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'pull_request') {
              throw new Error(`This GH action only supports pull_request events.`)
          }

    - name: Validate inputs
      if: ${{ inputs.configuration != '' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs        = require('fs')        
          const confPath  =  '${{ inputs.configuration }}'

          if (!fs.existsSync(confPath)) {
            core.setFailed(`configuration file not found: ${confPath}`)
          }

          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)

          core.startGroup('Configuration')
          console.log(conf, null, 2)
          core.endGroup()

    - name: Get commit messages
      uses: actions/github-script@v7
      id: get-commits
      with:
        script: |
          const commitListResponse = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          })

          const commits = await Promise.all(commitListResponse.data.map(async commit => {
            const commitDetail = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commit.sha
            });

            const files = commitDetail.data.files.map(file => file.filename);

            return {
              id: commit.sha,
              message: commit.commit.message,
              files: files
            }
          }));

          core.startGroup('Commits')
          console.log('commits', commits)
          core.endGroup()

          core.setOutput('commits', commits)

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install --omit=dev

    - name: Validate Commits
      uses: actions/github-script@v7
      id: validate-commits
      env:
        USE_INPUT_CONFIG: ${{ inputs.configuration != '' }}
        INPUT_CONFIG: ${{ inputs.configuration }}
        DEFAULT_CONFIG: ${{ github.action_path }}/default-config.json
        COMMITS: ${{ steps.get-commits.outputs.commits }}
      with:
        script: |
          const fs            = require('fs')        
          const { Index }     = require('${{ github.action_path }}/index.js')

          const confPath      = process.env.USE_INPUT_CONFIG === 'true' ? process.env.INPUT_CONFIG : process.env.DEFAULT_CONFIG
          const configContent = fs.readFileSync(confPath)
          const conf          = JSON.parse(configContent)
          const commits       = JSON.parse(process.env.COMMITS)

          Index(core, conf, commits)

    - name: add labels to the PR
      if: ${{  inputs.add-labels-to-pr == 'true' }}
      uses: actions/github-script@v7
      env:
        RELEASE_TRIGGERED: ${{ steps.validate-commits.outputs.next-release-triggered }}
        NEXT_RELEASE_TYPE: ${{ steps.validate-commits.outputs.next-release-type }}
        CHANGES: ${{ steps.validate-commits.outputs.changes }}
      with:
        script: |
          const releaseTriggered = process.env.RELEASE_TRIGGERED === 'true'
          const nextReleaseType = releaseTriggered ? process.env.NEXT_RELEASE_TYPE : 'no-release'

          labels = [`release-type:${nextReleaseType}`]

          // add commit types as labels
          const changes = JSON.parse(process.env.CHANGES).map(change => change.type).filter((value, index, self) => self.indexOf(value) === index)
          changes.forEach(change => labels.push(`change:${change}`))

          await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            })

    - name: printing summary
      if: ${{ inputs.print-summary == 'true' }}
      uses: actions/github-script@v7
      env:
        RELEASE_TRIGGERED: ${{ steps.validate-commits.outputs.next-release-triggered }}
        NEXT_RELEASE_TYPE: ${{ steps.validate-commits.outputs.next-release-type }}
        NEXT_VERSION: ${{ steps.validate-commits.outputs.next-version }}
      with:
        script: |
          const releaseTriggered = process.env.RELEASE_TRIGGERED === 'true'

          if (releaseTriggered) {
            const nextVersion = process.env.NEXT_VERSION
            const nextReleaseType = process.env.NEXT_RELEASE_TYPE

            core.summary
              .addHeading('üìΩÔ∏è Next release')
              .addTable([
                [{ data: 'version', header: true }, { data: 'type', header: true }],
                [nextVersion, nextReleaseType]
              ])
              .write()

            if(nextReleaseType === 'major') {
              core.warning('‚ö†Ô∏è This is a major release, please check the changes carefully')
            }
          } else {
            core.summary
              .addRaw("changes won't trigger a new release")
              .write()
          }
