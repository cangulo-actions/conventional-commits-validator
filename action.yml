name: "🚔️ Commits Validation"
description: >
  Validate PR commits and calculate the next release version based on the changes.
  Commits must follow the conventional commit format `type(scope): description`
  Example: `feat(core): add new feature`
  Custom configuration is supported through a YML file.
inputs:
  configuration:
    description: "path to the YML configuration"
    required: false
    default: ""
  calculate-next-release:
    description: >
      flag for calculating the next release. It will be printed as an annotation.
    required: false
    default: "false"
  version-prefix:
    description: |
      string to be added as prefix to the version.
      Only available if calculate-next-release is true.
      Example: v -> next-version: v1.0.0
    required: false
    default: ""
  label-pr-with-release-type:
    description: >
      flag for adding the release type as a label to the PR.
      Format: 'release-type:<value>'
      Release Types: 'major', 'minor', 'patch', 'no-release'
      Example: 'release-type:major'
    required: false
    default: "false"
  label-pr-with-commit-types:
    description: >
      flag for adding each commit type as a label to the PR.
      Format: '<commit-type>'
      Commit Types: defined in 'commits.default' at ./config.schema.yml or in the inputs.configuration file
      Example: 'fix,docs'
    required: false
    default: "false"
  label-pr-with-commit-scopes:
    description: flag for adding all scopes as labels to the PR.
    required: false
    default: "false"

outputs:
  new-release-triggered:
    value: ${{ steps.calculate-next-release.outputs.next-release-triggered }}
    description: "flag to detect if the PR changes will trigger a new release"
  next-version:
    value: ${{ steps.calculate-next-release.outputs.next-version }}
    description: "version to be released when the PR is merged"
  next-release-type:
    value: ${{ steps.calculate-next-release.outputs.next-release-type }}
    description: "next release type: major, minor or patch"
  changes:
    value: ${{ steps.calculate-next-release.outputs.changes }}
    description: "commits parsed into model: [{type, releaseAssociated, scopes, description, originalCommit}]"
  scopes:
    value: ${{ steps.semver.outputs.scopes }}
    description: "{scopename:{version,changes,changelog-record}}"

runs:
  using: "composite"
  steps:
    - name: Validate Context and squashed commit received
      uses: actions/github-script@v7
      with:
        script: |
          if (context.eventName !== 'pull_request') {
              throw new Error(`This GH action only supports pull_request events.`)
          }

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install --omit=dev

    - name: Process configuration
      uses: actions/github-script@v7
      id: config
      env:
        INPUT_CONFIG: ${{ inputs.configuration }}
        NODE_MODULES_PATH: ${{ github.action_path }}/node_modules
        SCHEMA: ${{ github.action_path }}/config.schema.yml
      with:
        script: |
          const yml = require(`${process.env.NODE_MODULES_PATH}/js-yaml`)
          const Ajv = require(`${process.env.NODE_MODULES_PATH}/ajv`)
          const fs  = require('fs')

          const schemaPath    = process.env.SCHEMA
          const inputConfig   = process.env.INPUT_CONFIG
          const schemaContent = fs.readFileSync(schemaPath)
          const schema        = yml.load(schemaContent)
          let   config        = {}

          if(inputConfig !== '') {
            const configPath    = inputConfig
            const configContent = fs.readFileSync(configPath)
            config              = yml.load(configContent)
          }

          const ajv       = new Ajv({ useDefaults: true })  // add default values to the config properties
          const validate  = ajv.compile(schema)
          const valid     = validate(config)                // from now on config includes any missing default values

          if (!valid) {
            const errorsJson = JSON.stringify(validate.errors, null, 2)
            core.setFailed(`configuration file is not valid: ${errorsJson}`)
          }

          core.startGroup('Configuration')
          console.log('config:', JSON.stringify(config, null, 2))
          core.endGroup()

          const scopesRequireCalculateNextRelease = config.scopes.list.some(x => x['calculate-next-version'] === true) || config.scopes['calculate-next-version']

          core.setOutput('config', config)
          core.setOutput('scopes-require-calculate-next-release', scopesRequireCalculateNextRelease)

    - name: Get commit messages
      uses: actions/github-script@v7
      id: get-commits
      with:
        script: |
          const commitListResponse = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          })

          const commits = await Promise.all(commitListResponse.data.map(async commit => {
            const commitDetail = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commit.sha
            });

            const files = commitDetail.data.files.map(file => file.filename);

            return {
              id: commit.sha,
              message: commit.commit.message,
              files: files
            }
          }));

          core.startGroup('Commits')
          console.log('commits', commits)
          core.endGroup()

          core.setOutput('commits', commits)

    - name: >
        Ensure all commits follow conventional commit format `type(scope): description`
      uses: actions/github-script@v7
      env:
        COMMITS: ${{ steps.get-commits.outputs.commits }}
      with:
        script: |
          const { isConventional}     = require('${{ github.action_path }}/functions/parse-change')
          const commits               = JSON.parse(process.env.COMMITS)

          const unconventionalCommits = commits.filter(x => !isConventional(x.message))

          if (unconventionalCommits.length > 0) {
            core.summary
              .addHeading('🛑 Invalid commits:')
              .addCodeBlock(JSON.stringify(unconventionalCommits, null, 2), 'json')
              .write()
            core.setFailed('Errors found validating the commits. Please Check the summary.')
          }

    - name: Parse the changes
      uses: actions/github-script@v7
      id: list-changes
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        COMMITS: ${{ steps.get-commits.outputs.commits }}
      with:
        script: |
          const { parseChange } = require('${{ github.action_path }}/functions/parse-change')
          const commits         = JSON.parse(process.env.COMMITS)
          const config          = JSON.parse(process.env.CONFIG)

          const changes = commits
            .map(x => {
              const parsedChange = parseChange(x.message, config.commits)
              parsedChange.commitId = x.id
              parsedChange.files = x.files
              return parsedChange
            })

          core.startGroup('Changes')
          console.log('changes:', JSON.stringify(changes, null, 2))
          core.endGroup()

          core.setOutput('changes', changes)

    - name: Validate changes
      uses: actions/github-script@v7
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        CHANGES: ${{ steps.list-changes.outputs.changes }}
      with:
        script: |
          const { validateChanges }   = require('${{ github.action_path }}/functions/validate-changes')
          const config                = JSON.parse(process.env.CONFIG)
          const changes               = JSON.parse(process.env.CHANGES)

          const supportedCommitTypes  = config.commits.map(x => x.type)
          const errors                = validateChanges(changes, supportedCommitTypes, config.scopes.list)

          if (errors.length > 0) {
            const errorsJSON = JSON.stringify(errors, null, 2)
            core.summary
              .addHeading('🛑 Errors Found validations commits:')
              .addCodeBlock(errorsJSON, 'json')
              .addSeparator()
              .addHeading('Configuration:')
              .addCodeBlock(JSON.stringify(config, null, 2), 'json')
              .write()
            core.setFailed('Errors found validating the commits. Please Check the summary.')
          }

    - name: Calculate next release
      uses: actions/github-script@v7
      if: ${{ inputs.calculate-next-release == 'true' || steps.config.outputs.scopes-require-calculate-next-release == 'true' }}
      id: calculate-next-release
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        CHANGES: ${{ steps.list-changes.outputs.changes }}
        VERSION_PREFIX: ${{ inputs.version-prefix }}
      with:
        script: |
          const { buildNextReleases }   = require('${{ github.action_path }}/functions/build-next-releases')
          const config                  = JSON.parse(process.env.CONFIG)
          const changes                 = JSON.parse(process.env.CHANGES)
          const versionPrefix           = process.env.VERSION_PREFIX

          let result        = buildNextReleases(config, changes)
          result['version'] = `${versionPrefix}${result['version']}`

          core.startGroup('Next Release')
          console.log('next release:', JSON.stringify(result, null, 2))
          core.endGroup()

          core.setOutput('next-release-triggered',  result.releaseRequired)
          core.setOutput('next-version',            result.version)
          core.setOutput('next-release-type',       result.releaseType)
          core.setOutput('scopes',                  result.scopes)

    - name: Print next release
      uses: actions/github-script@v7
      if: ${{ inputs.calculate-next-release == 'true' || steps.config.outputs.scopes-require-calculate-next-release == 'true' }}
      id: print-next-release
      env:
        CONFIG: ${{ steps.config.outputs.config }}
        NEXT_RELEASE_REQUIRED: ${{ steps.calculate-next-release.outputs.next-release-triggered }}
        NEXT_VERSION: ${{ steps.calculate-next-release.outputs.next-version }}
        NEXT_RELEASE_TYPE: ${{ steps.calculate-next-release.outputs.next-release-type }}
        SCOPES: ${{ steps.calculate-next-release.outputs.scopes }}
      with:
        script: |
          const config                  = JSON.parse(process.env.CONFIG)
          const nextReleaseRequired     = process.env.NEXT_RELEASE_REQUIRED === 'true'
          const nextVersion             = process.env.NEXT_VERSION
          const nextReleaseType         = process.env.NEXT_RELEASE_TYPE
          const scopes                  = JSON.parse(process.env.SCOPES)

          if (nextReleaseRequired) {
            const noticeMsgs = [
              { body: `${nextVersion} - ${nextReleaseType} release`, title: 'Next Release' }
            ]

            for (const [scopeName, scope] of Object.entries(scopes)) {
              noticeMsgs.push({ body: `${scope.version} - ${scope.releaseType} release`, title: `Next Release for ${scopeName} scope` })
            }

            noticeMsgs.forEach(msg => core.notice(msg.body, { title: msg.title }))

            if(nextReleaseType === 'major') {
              core.warning('Please check them carefully 🔎', { title: 'Changes will generate a major release' })
            }

          } else {
            core.notice(`commits won't trigger a new release`, { title: 'Changes will not generate a new release' })
          }

    - name: add labels to the PR
      if: >
        inputs.label-pr-with-commit-scopes    == 'true' ||
        inputs.label-pr-with-commit-types     == 'true' ||
        (
          inputs.calculate-next-release     == 'true' && 
          inputs.label-pr-with-release-type == 'true' 
        )
      uses: actions/github-script@v7
      env:
        ADD_SCOPES_AS_LABELS: ${{ inputs.label-pr-with-commit-scopes }}
        ADD_COMMIT_TYPES_AS_LABELS: ${{ inputs.label-pr-with-commit-types }}
        ADD_RELEASE_TYPE_AS_LABEL: ${{ inputs.calculate-next-release && inputs.label-pr-with-release-type }}
        RELEASE_TRIGGERED: ${{ steps.calculate-next-release.outputs.next-release-triggered }}
        NEXT_RELEASE_TYPE: ${{ steps.calculate-next-release.outputs.next-release-type }}
        CHANGES: ${{ steps.list-changes.outputs.changes }}
      with:
        script: |
          const changes           = JSON.parse(process.env.CHANGES)
          const addReleaseType    = process.env.ADD_RELEASE_TYPE_AS_LABEL   === 'true'
          const addCommitTypes    = process.env.ADD_COMMIT_TYPES_AS_LABELS  === 'true'
          const addScopes         = process.env.ADD_SCOPES_AS_LABELS        === 'true'

          labels = []

          if(addReleaseType) {
            const releaseTriggered  = process.env.RELEASE_TRIGGERED === 'true'
            const nextReleaseType   = releaseTriggered ? process.env.NEXT_RELEASE_TYPE : 'no'
            const label             = `${nextReleaseType}-release`
            labels.push(label)
          }

          if(addCommitTypes) {
            changes
              .map(change => change.type)
              .filter((value, index, self) => self.indexOf(value) === index)
              .forEach(change => labels.push(change))
          }

          if(addScopes) {
            changes
              .map(change => change.scopes)
              .flat()
              .filter((value, index, self) => self.indexOf(value) === index)
              .forEach(scope => labels.push(scope))
          }

          // ensure changes are uniques
          labels = labels.filter((value, index, self) => self.indexOf(value) === index)

          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            labels: labels
              })

# refresh 20240112-1
